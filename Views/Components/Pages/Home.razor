@page "/"
@page "/senaste/{CurrentPage:int}"
@inject IHttpClientFactory ClientFactory
@using MichaelKjellander.Views.Components.Boxes
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.ApiResponse
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.Domains.Models.Wordpress
@using MichaelKjellander.Views.Services
@using MichaelKjellander.Views.Services.Api
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@rendermode InteractiveServer
@inject ILogger<PaginationBox> Logger
@inject JsService JsService
@inject TranslationsService Ts

<PageTitle>
    @(CurrentPage > 1 ? $"Michael Kjellander - {Ts.Get(TKey.Menu_Latest)} - {Ts.Get(TKey.Blog_Page)} {CurrentPage}" : "Michael Kjellanders hemsida")
</PageTitle>

@if (IsFirstPage && _welcomePageMessage != null)
{
    <TitleBox Title=@_welcomePageMessage.Title Description=@_welcomePageMessage.Content/>
}
<Modal/>


<PostBoxes Posts="_posts" PaddingForFirst="(IsFirstPage)"/>

<PaginationBox paginationData="@_pagination" UrlPrefix="/senaste" FirstUrlPrefix="/"/>


@code {
    [Parameter] public int? CurrentPage { get; set; }
    private IList<WpPost>? _posts;
    private PaginationData? _pagination;
    private WpPage? _welcomePageMessage;

    private bool IsFirstPage => CurrentPage is null or 1;

    protected override async Task OnInitializedAsync()
    {
        CurrentPage ??= 1;
        BlogApiService service = new(ClientFactory.CreateClient(), Options);

        _welcomePageMessage = (await service.FetchPages(identifier: PageIdentifier.welcome)).First();

        ApiResponse<WpPost> postData = await service.FetchPosts(pageNumber: CurrentPage ?? 1);
        this._posts = postData.Items;
        this._pagination = postData.PaginationData;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        //JsService.ScrollToTop();
    }

}