@page "/kategori/{Slug}"
@page "/kategori/{Slug}/{Page:int}"
@using MichaelKjellander.Views.Components.Boxes
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.ApiResponse
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.Domains.Models.Wordpress
@using MichaelKjellander.IndependentUtils.Collections
@using MichaelKjellander.Tools.Url
@using MichaelKjellander.Views.Routes
@using MichaelKjellander.Views.Services.Api
@using MichaelKjellander.Views.Components.ToggleButton
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject NavigationManager Navigation
@rendermode InteractiveServer
@inject TranslationsService Ts

<PageTitle>
    @(Ts.FormatPageTitle(_category?.Name, Page))
</PageTitle>

@if (IsFirstPage && _category != null)
{
    <TitleBox Title="@_category.Name" Description="@_category?.Description">
        @if (_category!.Type == CategoryType.GameReview)
        {
            <ToggleButtonBox Title="@Ts.Get(TKey.Meta_Platform)" Indexer="@Filter!.Tags" OnClear="OnToggleButtonsChange">
                @foreach (WpTag tag in _allTags)
                {
                    WpTag localTag = tag;
                    <ToggleButton Count="@GetTagCount(localTag.Name!)" Indexer="@Filter!.Tags" Index="@localTag.Id" OnToggle="OnToggleButtonsChange">
                        @localTag.ShortName
                    </ToggleButton>
                }
            </ToggleButtonBox>
            <p></p>
            <ToggleButtonBox Title="@Ts.Get(TKey.Meta_Rating)" Indexer="@Filter!.Ratings" OnClear="OnToggleButtonsChange">
                @for (int rating = 1; rating <= 10; rating++)
                {
                    int localRating = rating;
                    <ToggleButton Count="@GetRatingCount(localRating)" Indexer="@Filter!.Ratings" Index="@localRating" OnToggle="OnToggleButtonsChange">
                        @Ts.GetRatingTranslation(localRating)
                    </ToggleButton>
                }
            </ToggleButtonBox>
        }
    </TitleBox>
}

@if (NoPostsFound)
{
    <div class="pt-10">@Ts.Get(TKey.Posts_NoPostWithFilter)</div>
}
else
{
    <div class="sg-posts-related-container" data-loading="@_isLoading">
        <PostBoxes Posts="_posts"/>
        <PaginationBox paginationData="@_pagination" UrlPrefix="@_prefix" Query="@_query"/>
    </div>
}

@code {

    //TODO: seperate specific category stuff, like GameReview filters, in seperate component: #12
    [Parameter] public string? Slug { get; set; }
    [Parameter] public int? Page { get; set; }
    private IList<WpPost>? _posts;
    private WpCategory? _category;
    private PaginationData? _pagination;
    private string? _prefix;
    [SupplyParameterFromForm] public GameReviewFilter? Filter { get; set; }
    BlogApiService? _service;
    private bool IsFirstPage => Page is null or 1;
    private bool _isLoading = true;
    private Url? _url;
    private string? _query;
    private bool NoPostsFound => !_isLoading && (_posts == null || _posts!.Count == 0);
    private readonly List<WpTag> _allTags = [];
    private string RatingName => Ts.Get(TKey.Slug_QueryRatings);
    private string TagsName => Ts.Get(TKey.Slug_QueryTags);

    protected override async Task OnInitializedAsync()
    {
        if (Slug == null)
        {
            return;
        }

        _isLoading = true;
        Filter ??= new GameReviewFilter();

        _url = new Url(Navigation.Uri);
        _query = _url!.GetQueryString();
        ICollection<int> ratingParams = _url.GetQueryParametersInt(RatingName);
        Filter.Ratings.ReplaceWithRange(ratingParams);
        ICollection<int> tagParams = _url.GetQueryParametersInt(TagsName);
        Filter.Tags.ReplaceWithRange(tagParams);

        _service ??= new BlogApiService(ClientFactory.CreateClient(), Options);

        _allTags.Clear();
        _allTags.AddRange(await _service.FetchTags(Slug));

        await FetchData();
    }

    private async Task FetchData()
    {
        _isLoading = true;
        ApiResponse<WpPost> postsData = await _service!.FetchPosts(pageNumber: Page ?? 1, categorySlug: Slug,
            tagIds: Filter!.Tags.Values, metaRatings: Filter!.Ratings.Values);
        _posts = postsData.Items;
        _category ??= _posts?.FirstOrDefault()?.Category;
        _prefix ??= PageRoutes.Category(Slug!);
        _pagination = postsData.PaginationData;


        _isLoading = false;
    }

    private int GetTagCount(string keyName)
    {
        return GetFilterItemCount("tags", keyName);
    }

    private int GetRatingCount(int keyName)
    {
        return GetFilterItemCount("ratings", keyName+"");
    }

    private int GetFilterItemCount(string name, string keyName)
    {
        if (!_pagination!.FieldCounts.ContainsKey(name))
        {
            return 0;
        }
        bool valid = _pagination!.FieldCounts[name].TryGetValue(keyName, out int count);
        return valid ? count : 0;
    }

    protected override void OnAfterRender(bool isFirstRender)
    {
        //JsService.ScrollToTop();
    }

    //Specific to GameReview stuff from here onwards. Perhaps move to seperate page route?
    private async Task RefreshUrlAndFetch()
    {
        _url = new UrlBuilder(PageRoutes.Category(CategoryType.GameReview), QueryArrayMode.Multiple) //TODO: hardcoded
            .AddParam(RatingName, Filter!.Ratings.Values)
            .AddParam(TagsName, Filter!.Tags.Values)
            .ToUrl();
        _query = _url.GetQueryString();
        Navigation.NavigateTo(_url.ToString(), false, true);

        await FetchData();
    }

    private async Task OnToggleButtonsChange()
    {
        await RefreshUrlAndFetch();
    }

    public class GameReviewFilter
    {
        public readonly Indexer<int> Tags;
        public readonly Indexer<int> Ratings;

        public GameReviewFilter()
        {
            Tags = new Indexer<int>();
            Ratings = new Indexer<int>();
        }
    }

}