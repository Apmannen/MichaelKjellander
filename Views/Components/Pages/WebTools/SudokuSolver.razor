@page "/verktyg/sudoku-losare"
<h3>SudokuSolver</h3>

@code {

    protected override async Task OnInitializedAsync()
    {
        String s = "240 000 107" +
                   "608 915 302" +
                   "900 027 060" +
                   "" +
                   "097 132 605" +
                   "000 508 034" +
                   "500 000 000" +
                   "" +
                   "702 309 801" +
                   "000 800 000" +
                   "019 000 470";
        Board board = CreateBoard(s);
        board.Debug();
    }
    
    private Board CreateBoard(string stringBoard)
    {
        stringBoard = stringBoard.Replace(" ", "");
        stringBoard = stringBoard.Replace("\n", "");
        int[] values = stringBoard.Select(c => int.Parse(c + "")).ToArray();
        return CreateBoard(values);
    }

    private Board CreateBoard(int[] values)
    {
        Board board = new Board();
        int x = 0;
        int y = 0;
        for (int i = 0; i < values.Length; i++)
        {
            board.Get(i).Value = values[i];
        }

        return board;
    }

    private class Board
    {
        private const int SideLength = 9;
        private const int TotalNumSquares = SideLength * SideLength;
        private const int GroupSize = 3;
        private readonly Square[] _squares = new Square[TotalNumSquares];

        public Board()
        {
            for (int i = 0; i < _squares.Length; i++)
            {
                _squares[i] = new Square();
            }

            for (int y = 0; y < SideLength; y++)
            {
                for (int x = 0; x < SideLength; x++)
                {
                    Square square = Get(x, y);
                    square.X = x;
                    square.Y = y;

                    int xGroup = (int)Math.Floor((float)x / (float)GroupSize);
                    int yGroup = (int)Math.Floor((float)y / (float)GroupSize);
                    square.Group = xGroup + "" + yGroup;
                }
            }
        }

        public Square Get(int index)
        {
            return _squares[index];
        }

        public Square Get(int x, int y)
        {
            int index = x + (y * SideLength);
            return _squares[index];
        }

        public void Debug()
        {
            for (int y = 0; y < SideLength; y++)
            {
                for (int x = 0; x < SideLength; x++)
                {
                    Console.Write(Get(x,y).ToString());
                }
                Console.WriteLine();
            }
        }
    }
    private class Square
    {
        public int Value;
        public int X;
        public int Y;
        public string Group = "";

        public override string ToString()
        {
            return $"Square[Value={Value}, X={X}, Y={Y}, Group={Group}]";
        }
    }
}