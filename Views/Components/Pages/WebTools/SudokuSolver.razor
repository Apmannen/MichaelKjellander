@page "/verktyg/sudoku-losare"
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.IndependentUtils.Collections
@using MichaelKjellander.Views.Components.Boxes
@using MichaelKjellander.Views.Services.Api
@using MichaelKjellander.Views.Components.Alerts
@inject TranslationsService Ts
@inject IJSRuntime Js
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@rendermode InteractiveServer

<PageTitle>
    @(Ts.FormatPageTitle(TKey.Tools_SudokuTitle))
</PageTitle>

<TitleBox Title="@Ts.Get(TKey.Tools_SudokuTitle)">
    @Ts.Get(TKey.Tools_SudokuDescription)
</TitleBox>

<SimpleBox>
    <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div class="">
            <strong>@Ts.Get(TKey.Tools_SudokuUnsolvedTitle)</strong>
            <div class="h-4"></div>
            <table @ref="_unsolvedTableRef">
                <tbody>
                @for (int y = 0; y < 9; y++)
                {
                    <tr>
                        @for (int x = 0; x < 9; x++)
                        {
                            int i = (y * 9) + x;
                            <td class="column-x-@x column-y-@y">
                                <input type="number" @bind="_filledValues[i]"/>
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="">
            <strong>@Ts.Get(TKey.Tools_SudokuSolvedTitle)</strong>
            <div class="h-4"></div>
            <table>
                <tbody>
                @for (int y = 0; y < 9; y++)
                {
                    <tr>
                        @for (int x = 0; x < 9; x++)
                        {
                            int i = (y * 9) + x;
                            <td class="column-x-@x column-y-@y">
                                <span>@GetSolvedValue(i)</span>
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="h-8"></div>
    @if (!_canSolve)
    {
        <ErrorAlert Message="@Ts.Get(TKey.Tools_SudokuFailSolve)"/>
        <div class="h-8"></div>
    }
    <button class="btn btn-default" @onclick="OnSolveClick">@Ts.Get(TKey.Tools_SudokuSolveVerb)</button>
    <button class="btn btn-danger" @onclick="OnClearClick">@Ts.Get(TKey.Misc_Clear)</button>
</SimpleBox>

<script>
    function getTableElement() {
        return window.sudokuContext.tableElement;
    }
    function getInputs() {
        return getTableElement().getElementsByTagName("input");
    }
    
    document.onkeydown = function(event) {
        const activeElement = document.activeElement;
        const inputs = getInputs();
        
        let activeIndex = null;
        let newActiveIndex = null;
        for (let i = 0; i < inputs.length; i++) {
            const input = inputs[i];
            if (input === activeElement) {
                activeIndex = i;
                break;
            }
        }
        if (activeIndex === null) {
            return;
        }
        
        switch (event.key) {
            case "ArrowLeft":
                if ((activeIndex % 9) === 0) {
                    newActiveIndex = activeIndex + 8;
                } else {
                    newActiveIndex = activeIndex - 1;
                }
                break;
            case "ArrowRight":
                newActiveIndex = activeIndex + 1;
                if ((newActiveIndex % 9) === 0) {
                    newActiveIndex -= 9;
                }
                break;
            case "ArrowUp":
                newActiveIndex = activeIndex - 9;
                if (newActiveIndex < 0) {
                    newActiveIndex = inputs.length + newActiveIndex;
                }
                break;
            case "ArrowDown":
                newActiveIndex = activeIndex + 9;
                if (newActiveIndex >= inputs.length) {
                    newActiveIndex = newActiveIndex - inputs.length;
                }
                break;
        }
        if (newActiveIndex === null)
        {
            return;
        }
        
        inputs[newActiveIndex].focus();
    };
    
    window.clearInputs = function ()
    {
        const inputs = getInputs();
        for (let i = 0; i < inputs.length; i++) {
            inputs[i].value = "";
        }
    }
    
    window.trackTableChanges = function(tableElement) {
        window.sudokuContext = {
            tableElement: tableElement
        };
    
        const inputs = getInputs();
        const inputValues = [];
        
        const onInput = (event, index) => {
            let newValue = event.data;
            const intValue = parseInt(newValue);
            if (isNaN(intValue) || intValue === 0) {
                newValue = "";
            }           
            event.target.value = newValue;
            inputValues[index] = newValue;
        };
        
        for (let i = 0; i < inputs.length; i++) {
            inputValues[i] = "";
            const input = inputs[i];
            const localI = i;
            input.addEventListener("input", (event) => {
                onInput(event,  localI);               
            });   
        }
    }
</script>

@code {
    private ElementReference _unsolvedTableRef;
    private bool _canSolve = true;

    private readonly Indexer<int, string> _filledValues = new();
    private IList<int>? _solvedValues = null;
    private const int TotalNumSquares = 81;
    
    protected override void OnInitialized()
    {
        ClearAlert();
        _filledValues.AddChangeListener("alert-clear", ClearAlert);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Js.InvokeVoidAsync("trackTableChanges", _unsolvedTableRef);
        }
    }

    private int? GetSolvedValue(int index)
    {
        int? value = _solvedValues?[index];
        return value is > 0 ? value : null;
    }

    private async Task OnSolveClick()
    {
        int[] values = new int[TotalNumSquares];
        for (int i = 0; i < TotalNumSquares; i++)
        {
            string stringValue = _filledValues[i];
            bool isValid = int.TryParse(stringValue, out int value);
            values[i] = isValid ? value : 0;
        }
        ToolsApiService service = new(ClientFactory.CreateClient(), Options);
        IList<int> result = await service.PostSolveSudoku(values);
        _canSolve = result.Count == TotalNumSquares && !result.Contains(0);
        _solvedValues = result;
    }

    private void OnClearClick()
    {
        Js.InvokeVoidAsync("clearInputs");
        _solvedValues = null;
        _filledValues.Clear();
        ClearAlert();
    }

    private void ClearAlert()
    {
        _canSolve = true;
    }
}