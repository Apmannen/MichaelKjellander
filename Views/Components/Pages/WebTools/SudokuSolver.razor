@page "/verktyg/sudoku-losare"
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.IndependentUtils.Collections
@using MichaelKjellander.Views.Components.Boxes
@using MichaelKjellander.Views.Services.Api
@inject TranslationsService Ts
@inject IJSRuntime Js
@rendermode InteractiveServer

<PageTitle>
    @(Ts.FormatPageTitle(TKey.Tools_SudokuTitle))
</PageTitle>

<TitleBox Title="@Ts.Get(TKey.Tools_SudokuTitle)">
    @Ts.Get(TKey.Tools_SudokuDescription)
</TitleBox>

<SimpleBox>
    <div class="grid grid-cols-12 gap-8">
        <div class="col-span-6">
            <strong>@Ts.Get(TKey.Tools_SudokuUnsolvedTitle)</strong>
            <div class="h-4"></div>
            <table style="width:100%" @ref="_unsolvedTableRef">
                <tbody>
                @for (int y = 0; y < 9; y++)
                {
                    <tr>
                        @for (int x = 0; x < 9; x++)
                        {
                            int i = (y * 9) + x;
                            <td class="column-x-@x column-y-@y">
                                <input type="text" @bind="_filledValues[i]"/>
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
        <div class="col-span-6">
            <strong>@Ts.Get(TKey.Tools_SudokuSolvedTitle)</strong>
            <div class="h-4"></div>
            <table style="width:100%">
                <tbody>
                @for (int y = 0; y < 9; y++)
                {
                    <tr>
                        @for (int x = 0; x < 9; x++)
                        {
                            <td class="column-x-@x column-y-@y">
                                <span>0</span>
                            </td>
                        }
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
    <div class="h-8"></div>
    <button class="btn btn-dark" @onclick="OnSolveClick">@Ts.Get(TKey.Tools_SudokuSolveVerb)</button>
</SimpleBox>

<script>
    window.trackTableChanges = function(tableElement) {
        const inputs = tableElement.getElementsByTagName("input");
        const inputValues = [];
        
        const onInput = (event, index) => {
            //const prevValue = inputValues[index];
            let newValue = event.data;
            const intValue = parseInt(newValue);
            if (isNaN(intValue) || intValue === 0) {
                newValue = "";
            }           
            event.target.value = newValue;
            inputValues[index] = newValue;
        };
        
        for (let i = 0; i < inputs.length; i++) {
            inputValues[i] = "";
            const input = inputs[i];
            const localI = i;
            input.addEventListener("input", (event) => {
                onInput(event,  localI);               
            });   
        }
    }
</script>

@code {
    private ElementReference _unsolvedTableRef;

    private readonly Indexer<int,string> _filledValues = new();

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Js.InvokeVoidAsync("trackTableChanges", _unsolvedTableRef);
        }
    }

    private void OnSolveClick()
    {
        
    }

    protected override async Task OnInitializedAsync()
    {
        String s = "000 590 037" +
                   "079 032 080" +
                   "008 700 000" +
                   "" +
                   "300 001 620" +
                   "090 006 370" +
                   "720 300 158" +
                   "" +
                   "000 007 865" +
                   "087 010 240" +
                   "054 600 700";
        Board board = CreateBoard(s);
        board.Solve();
        ;
        board.Debug();
    }

    private Board CreateBoard(string stringBoard)
    {
        stringBoard = stringBoard.Replace(" ", "");
        stringBoard = stringBoard.Replace("\n", "");
        int[] values = stringBoard.Select(c => int.Parse(c + "")).ToArray();
        return CreateBoard(values);
    }

    private Board CreateBoard(int[] values)
    {
        Board board = new Board();
        int x = 0;
        int y = 0;
        for (int i = 0; i < values.Length; i++)
        {
            board.Get(i).Value = values[i];
        }

        return board;
    }

    private class Board
    {
        private const int SideLength = 9;
        private const int TotalNumSquares = SideLength * SideLength;
        private const int GroupSize = 3;
        private readonly Square[] _squares = new Square[TotalNumSquares];

        public Board()
        {
            for (int i = 0; i < _squares.Length; i++)
            {
                _squares[i] = new Square { Index = i };
            }

            for (int y = 0; y < SideLength; y++)
            {
                for (int x = 0; x < SideLength; x++)
                {
                    Square square = Get(x, y);
                    square.X = x;
                    square.Y = y;

                    int xGroup = (int)Math.Floor((float)x / (float)GroupSize);
                    int yGroup = (int)Math.Floor((float)y / (float)GroupSize);
                    square.Group = xGroup + "" + yGroup;

                    if (square.IsSet)
                    {
                        square.Possibles.Add(square.Value);
                    }
                }
            }
        }

        public void Solve()
        {
            bool anyChange = true;
            while (anyChange)
            {
                anyChange = false;
                foreach (Square square in _squares)
                {
                    anyChange = TrySolveSquare(square) || anyChange;
                }
            }
        }

        private bool TrySolveSquare(Square square)
        {
            if (square.IsSet)
            {
                return false;
            }

            HashSet<int> possibles = [1, 2, 3, 4, 5, 6, 7, 8, 9];
            HashSet<int> impossibles = [];
            List<Square> setSquares = _squares.Where(s => s.Index != square.Index && s.Value != 0).ToList();

            impossibles.UnionWith(setSquares.Where(s => s.X == square.X || s.Y == square.Y || s.Group == square.Group)
                .Select(s => s.Value));

            possibles.RemoveWhere(value => impossibles.Contains(value));
            if (possibles.Count == 0)
            {
                throw new Exception("Illegal count");
            }

            if (possibles.Count == 1)
            {
                square.Value = possibles.First();
                return true;
            }

            return false;
        }

        public Square Get(int index)
        {
            return _squares[index];
        }

        public Square Get(int x, int y)
        {
            int index = x + (y * SideLength);
            return _squares[index];
        }

        public void Debug()
        {
            for (int y = 0; y < SideLength; y++)
            {
                for (int x = 0; x < SideLength; x++)
                {
                    Console.Write(Get(x, y).Value);
                }

                Console.WriteLine();
            }
        }
    }

    private class Square
    {
        public int Value;
        public int Index;
        public int X;
        public int Y;
        public string Group = "";
        public readonly HashSet<int> Possibles = [];
        public bool IsSet => Value != 0;

        public override string ToString()
        {
            return $"Square[Value={Value}, X={X}, Y={Y}, Group={Group}]";
        }
    }

}