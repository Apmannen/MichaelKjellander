@page "/webbspel/gissa-ordet"
@inject IHttpClientFactory ClientFactory
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.Domains.Models.WebGames
@using MichaelKjellander.Views.Services.Api
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject TranslationsService Ts
@rendermode InteractiveServer

<PageTitle>
    @(Ts.FormatPageTitle(TKey.GuessWord_Title))
</PageTitle>

<h3>@Ts.Get(TKey.GuessWord_Title)</h3>
<p>@Ts.Format(TKey.GuessWord_Points, _points+"")</p>

@if (_isInitialized)
{
    <p>@Ts.Format(TKey.GuessWord_GuessesLeft, _progress!.GuessesLeft+"")</p>
    <div>
        @foreach (char aChar in _progressChars!)
        {
            <span class="mr-4 text-4xl w-6 inline-block text-center">@CharDisplay(aChar)</span>
        }
    </div>
    @if (_correctWord != null)
    {
        <div class="h-4"></div>
        <div>
            @if (_didWin == true)
            {
                <p>@Ts.Get(TKey.GuessWord_Congratulations)</p>
            }
            else
            {
                <p>@Ts.Get(TKey.GuessWord_Fail)</p>
                <p class="font-bold">@_correctWord.ToUpper()</p>
            }
            <div class="h-4"></div>
            <button class="btn btn-blue mr-3 mb-3" @onclick="OnNewGameButtonPress">
                @Ts.Get(TKey.WebGames_NewGame)
            </button>
        </div>
    }
    <div class="h-8"></div>
    @if (_correctWord == null)
    {
        <div>
            @foreach (char aLetter in _letters!)
            {
                <button class="btn btn-blue mr-3 mb-3" 
                        disabled="@(!IsLetterAvailable(aLetter))"
                        @onclick="() => OnLetterButtonPress(aLetter)">
                    @CharDisplay(aLetter)
                </button>
            }
        </div>
    }
}


@code {
    private WordGuessGameProgress? _progress;
    private IList<char>? _progressChars;
    private int _points = 0;
    private IList<char>? _letters;
    private IList<char>? _lettersLeft;
    private string? _correctWord;
    private bool _isLoading = true;
    private bool _isInitialized = false;
    private bool? _didWin;
    WebGamesApiService? _apiService;
    
    protected override async Task OnInitializedAsync()
    {
        _apiService = new WebGamesApiService(ClientFactory.CreateClient(), Options);
        await ResetGame();
    }
    
    private string CharDisplay(char c)
    {
        return (c + "").ToUpper();
    }

    private bool IsLetterAvailable(char letter)
    {
        return _lettersLeft!.Contains(letter);
    }

    private async Task ResetGame()
    {
        _isLoading = true;

        _progress = await _apiService!.FetchInitWordGuessGame();

        _progressChars = StringToCharList(_progress.WordProgress!);
        _letters = StringToCharList(Word.ValidLetters);
        _lettersLeft = StringToCharList(Word.ValidLetters);
        _correctWord = null;
        _didWin = null;

        _isLoading = false;
        _isInitialized = true;
    }
    
    private static IList<char> StringToCharList(string s)
    {
        return s.ToList();
    }

    private async Task OnNewGameButtonPress()
    {
        await ResetGame();
    }

    private async Task OnLetterButtonPress(char letter)
    {
        if (_isLoading)
        {
            return;
        }
        
        _isLoading = true;
        _lettersLeft!.Remove(letter);
        _progress = await _apiService!.FetchGuessResult(letter, _progress!.Uuid!);
        _progressChars = StringToCharList(_progress.WordProgress!);
        if (_progress.IsCorrectlyGuessed)
        {
            _correctWord = _progress.Word!.WordString;
            _didWin = true;
            _points += (int)_progress!.GuessesLeft!;
        }
        else if (_progress.GuessesLeft == 0)
        {
            _correctWord = _progress.Word!.WordString;
            _didWin = false;
            _points -= _progress.LettersLeft;
        }
        _isLoading = false;
    }
}