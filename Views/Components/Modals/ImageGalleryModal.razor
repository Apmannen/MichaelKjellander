@using System.ComponentModel.DataAnnotations
@using MichaelKjellander.Views.Services
@inject IJSRuntime Js
@inject JsService JsService

<div @ref=_modalParentRef class="sg-modal-parent" data-active="@false">
    <div class="sg-modal bg-white p-10 relative">
        <div class="content-container" @ref=_contentContainerRef></div>
    </div>
</div>

@if (IncludeScript)
{
    <script id="modal-image-template" type="text/x-handlebars-template">
        <img src="{{src}}"/>
    </script>
    <script>
        function setModalActive(modalContainer, active) {
            if (active) {
                modalContainer.setAttribute("data-active", true);
            } else {
                modalContainer.removeAttribute("data-active");
            }
        }

        document.onkeydown = function(event) {
            if (event.key === "Escape") {
                const modals = document.getElementsByClassName("sg-modal-parent");
                for(let modal of modals) {
                    setModalActive(modal, false);
                }
            }
        };

        //Since we get HTML as a string from Wordpress, I think this is the best way to handle click events for them.
        window.listenToClicksForActivatingModal = function(modalContainer, contentContainer) {
            const rootElement = modalContainer.parentElement;
            const images = rootElement.getElementsByTagName("img");
            const templateScript = document.getElementById("modal-image-template").innerText;
            const template = Handlebars.compile(templateScript);

            const handleBackgroundClick = (closeClickEvent) => {
                if(closeClickEvent.target === modalContainer) {
                    setModalActive(modalContainer, false);
                }
            }

            const handleImageClick = (imageClickEvent, image) => {
                imageClickEvent.preventDefault();
                setModalActive(modalContainer, true);
                const src = image.getAttribute("src");
                const splits = src.split(/-[0-9]+x[0-9]+/);
                let fullSizeSrc = src;
                if(splits.length === 2) {
                    fullSizeSrc = splits[0]+splits[1];
                }

                contentContainer.innerHTML = template({src: fullSizeSrc});

                modalContainer.addEventListener("click", (closeClickEvent) => {
                    handleBackgroundClick(closeClickEvent);
                });
            }

            for(let image of images) {
                image.addEventListener("click", (imageClickEvent) => {
                    handleImageClick(imageClickEvent, image);
                });
            }
        }
    </script>
}

@code {
    [Parameter, Required] public ElementReference Container { get; set; }
    [Parameter, Required] public bool IncludeScript { get; set; }

    private ElementReference _modalParentRef;
    private ElementReference _contentContainerRef;

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Js.InvokeVoidAsync("listenToClicksForActivatingModal", _modalParentRef, _contentContainerRef);
        }
    }

}