@using System.Text.RegularExpressions
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.Models.Wordpress
@using MichaelKjellander.Scripts.Startup.Generated
@using MichaelKjellander.Views.Components.Icons
@using MichaelKjellander.Views.Routes
@using MichaelKjellander.Views.Services.Api
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject IHttpClientFactory ClientFactory
@inject TranslationsService Ts

<div class="top-row navbar navbar-dark relative">
    <div class="container-fluid  pr-12">
        <a class="sg-navbar-brand font-bold text-2xl sm:text-3xl" href="/">Michael Kjellander</a>
    </div>
    <div class="absolute right-0 top-1 lg:hidden">
        <button class="border-gray-200 border hover:border-black pt-2 pb-2 pr-2 pl-2 " onclick="document.querySelector('.navbar-toggler').click()">
            <IconMenu2 Size="30"/>
        </button>
    </div>
</div>


<input type="checkbox" title="Navigation menu" class="navbar-toggler hidden"/>


<div class="nav-scrollable">
    <nav class="flex-column">
        <div class="h-6 lg:h-20"></div>
        @foreach (var link in _links)
        {
            <div class="nav-item border-gray-200">
                <a class="nav-link py-2 text-base @(IsCurrent(link) ? "active" : "")" href="@link.Url">
                    @link.Text
                </a>
            </div>
        }
    </nav>
</div>


@code {
    private NavLink[] _links = [];

    protected override async Task OnInitializedAsync()
    {
        BlogApiService service = new(ClientFactory.CreateClient(), Options);
        IList<WpCategory> categories = await service.FetchCategories();
        IList<WpPage> pages = await service.FetchPages();

        foreach (var p in pages)
        {
            Console.WriteLine("*** page="+p.MetaIdName);
        }

        _links =
        [
            new NavLink(Ts.Get(TKey.Menu_Latest), PageRoutes.Home, "(/|/senaste/[0-9]+)"),
            CreateCategoryNavLink(categories, CategoryType.Game),
            CreateCategoryNavLink(categories, CategoryType.GameReview),
            CreateCategoryNavLink(categories, CategoryType.Other),
            CreatePageNavLink(pages, PageIdentifier.contact)
        ];
    }


    private static NavLink CreateCategoryNavLink(IList<WpCategory> categories, CategoryType type)
    {
        WpCategory category = categories.First(category => category.Type == type);
        return new NavLink(category.Name!, PageRoutes.Category(type), PageRoutes.CategoryPattern(type));
    }

    private static NavLink CreatePageNavLink(IList<WpPage> pages, PageIdentifier identifier)
    {
        WpPage page = pages.First(page => page.PageIdentifier == identifier);
        return new NavLink(page.Title!, PageRoutes.Page(page.Slug!), "/sida/" + page.Slug);
    }

    private record struct NavLink(string Text, string Url, string Pattern);

    private bool IsCurrent(NavLink navLink)
    {
        string currentUrl = NavigationManager.Uri;

        string fullPattern = $"^{Options.Value.SiteUrl}{navLink.Pattern}$";
        Regex regex = new Regex(fullPattern);
        bool isMatch = regex.IsMatch(currentUrl);

        Console.WriteLine($"cu={currentUrl}, fp={fullPattern}, m={isMatch}");

        return isMatch;
    }

}