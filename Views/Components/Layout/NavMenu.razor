@using System.Text.RegularExpressions
@using MichaelKjellander.Config
@using MichaelKjellander.Domains.ApiResponse
@using MichaelKjellander.Domains.Generated
@using MichaelKjellander.Domains.Models.Wordpress
@using MichaelKjellander.Views.Components.Icons
@using MichaelKjellander.Views.Routes
@using MichaelKjellander.Views.Services.Api
@using MichaelKjellander.Views.Components.Buttons
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject IHttpClientFactory ClientFactory
@inject TranslationsService Ts
@rendermode InteractiveServer

<div class="top-row navbar navbar-dark relative">
    <div class="container-fluid  pr-12">
        <RefreshLink Class="sg-navbar-brand font-bold text-2xl sm:text-3xl" Href="/">Michael Kjellander</RefreshLink>
    </div>
    <div class="absolute right-0 top-1 lg:hidden">
        <button class="border-gray-200 border hover:border-black pt-2 pb-2 pr-2 pl-2 " onclick="document.querySelector('.navbar-toggler').click()">
            <IconMenu2 Size="30"/>
        </button>
    </div>
</div>


<input type="checkbox" title="Navigation menu" class="navbar-toggler hidden"/>


<div class="nav-scrollable">
    <nav class="flex-column">
        <div class="h-6 lg:h-20"></div>
        @foreach (var link in _links)
        {
            <div class="nav-item border-gray-200">
                <RefreshLink Class="@GetClass(link)" Href="@link.Url">
                    @link.Text
                </RefreshLink>
            </div>
        }
    </nav>
</div>


@code {
    private Link[] _links = [];
    private BlogApiService? _service;

    protected override async Task OnInitializedAsync()
    {
        _service ??= new BlogApiService(ClientFactory.CreateClient(), Options);
        IList<WpCategory> categories = await _service.FetchCategories();
        IList<WpPage> pages = await _service.FetchPages();

        WpPost? singlePost = null;
        string currentUrl = NavigationManager.Uri;
        if (currentUrl.StartsWith($"{Options.Value.SiteUrl}/inlagg"))
        {
            string slug = currentUrl.Split("/").Last();
            ApiResponse<WpPost> postsData = await _service.FetchPosts(postSlug: slug);
            singlePost = postsData.Items![0];
        }

        foreach (var p in pages)
        {
            Console.WriteLine("*** page="+p.MetaIdName);
        }

        _links =
        [
            new Link(Ts.Get(TKey.Menu_Latest), PageRoutes.Home, "(/|/senaste/[0-9]+)", false),
            CreateCategoryNavLink(categories, CategoryType.Game, singlePost),
            CreateCategoryNavLink(categories, CategoryType.GameReview, singlePost),
            CreateCategoryNavLink(categories, CategoryType.Other, singlePost),
            CreatePageNavLink(pages, PageIdentifier.contact)
        ];
    }


    private static Link CreateCategoryNavLink(IList<WpCategory> categories, CategoryType type, WpPost? singlePost)
    {
        WpCategory category = categories.First(category => category.Type == type);
        bool overrideActive = singlePost != null && singlePost.Category!.Id == category.Id;
        return new Link(category.Name!, PageRoutes.Category(type), PageRoutes.CategoryPattern(type), overrideActive);
    }

    private static Link CreatePageNavLink(IList<WpPage> pages, PageIdentifier identifier)
    {
        WpPage page = pages.First(page => page.PageIdentifier == identifier);
        return new Link(page.Title!, PageRoutes.Page(page.Slug!), "/sida/" + page.Slug, false);
    }

    private record struct Link(string Text, string Url, string Pattern, bool OverrideActive);

    private string GetClass(Link link)
    {
        return "nav-link py-2 text-base " + (IsCurrent(link) ? "active" : "");
    }

    private bool IsCurrent(Link navLink)
    {
        if (navLink.OverrideActive)
        {
            return true;
        }
        
        string currentUrl = NavigationManager.Uri;

        string fullPattern = $"^{Options.Value.SiteUrl}{navLink.Pattern}$";
        Regex regex = new Regex(fullPattern);
        bool isMatch = regex.IsMatch(currentUrl);

        Console.WriteLine($"cu={currentUrl}, fp={fullPattern}, m={isMatch}");

        return isMatch;
    }

}