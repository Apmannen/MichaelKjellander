@page "/webbspel/gissa-ordet"
@inject IHttpClientFactory ClientFactory
@using MichaelKjellander.Models.WebGames
@using MichaelKjellander.Services
@using MichaelKjellander.SharedUtils
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@rendermode InteractiveServer

<h3>Gissa ordet</h3>
<p>Poäng: @_points</p>

@if (_isInitialized)
{
    <p>Gissningar kvar: @_progress!.GuessesLeft</p>
    
    <div>
        @foreach (char aChar in _progressChars!)
        {
            <span class="mr-4 text-4xl">@CharDisplay(aChar)</span>
        }
    </div>
    <div class="h-8"></div>
    @if (!_isLoading)
    {
        <div>
            @foreach (char aLetter in _letters!)
            {
                <button class="btn btn-blue mr-3 mb-3" 
                        disabled="@(!IsLetterAvailable(aLetter))"
                        @onclick="() => OnLetterButtonPress(aLetter)">
                    @CharDisplay(aLetter)
                </button>
            }
        </div>
    }
}


@code {
    private WordGuessGameProgress? _progress;
    private IList<char>? _progressChars;
    private int _points = 0;
    private IList<char>? _letters;
    private IList<char>? _lettersLeft;
    private bool _isLoading = true;
    private bool _isInitialized = false;
    InternalApiService? _apiService;

    //TODO: will need to request more, can't do it over visible API
    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;

        _apiService = new InternalApiService(ClientFactory.CreateClient(), Options);
        _progress = await _apiService.FetchInitWordGuessGame();

        _progressChars = StringUtil.StringToCharList(_progress.WordProgress!);
        _letters = StringUtil.StringToCharList(Word.ValidLetters);
        _lettersLeft = StringUtil.StringToCharList(Word.ValidLetters);

        _isLoading = false;
        _isInitialized = true;
    }
    
    private string CharDisplay(char c)
    {
        return (c + "").ToUpper();
    }

    private bool IsLetterAvailable(char letter)
    {
        return _lettersLeft!.Contains(letter);
    }

    private async Task OnLetterButtonPress(char letter)
    {
        _isLoading = true;
        _lettersLeft!.Remove(letter);
        _progress = await _apiService!.FetchGuessResult(letter, _progress!.Uuid!);
        _progressChars = StringUtil.StringToCharList(_progress.WordProgress!);
        _isLoading = false;
    }
}