@page "/"
@using System.Text.Json
@using MichaelKjellander.Models.Wordpress
@inject IHttpClientFactory ClientFactory
@using MichaelKjellander.Utils
@using MichaelKjellander.Components.Icons

<PageTitle>Michael Kjellander</PageTitle>

<div class="bg-white sg-title-section">
    @*Borders ruins the padding*@
    <div class="sg-title-section-side"></div>
    <div class="py-10 px-20">
        <h1 class="text-2xl font-bold">Välkommen till Michael Kjellanders hemsida!</h1>
        <div class="h-4"></div>
        <h2 class="text-slate-500">
            Här postar jag tv-spelrecensioner och annat. Webbplatsen är byggd med Blazor med API-koppling mot min tidigare Wordpress-sajt.
        </h2>
    </div>
</div>


@if (posts != null)
{
    @foreach (var post in posts)
    {
        <article class="border border-gray-200 mt-16">
            @if (@post.FeaturedMedia != null)
            {
                <img src="@post.FeaturedMedia.PostThumbnailUrl"/>
            }
            <div class="bg-white sg-post p-20">
                <span class="italic ">@post.Category.Name</span>
                <div class="h-2"></div>
                <h3 class="text-4xl fw-bolder">@post.Title</h3>
                <div class="sg-post-content">
                    @((MarkupString)@post.Content)
                </div>
            </div>
            <div class="px-20 py-10 bg-gray-100">
                <p>
                    <IconCalendarMonth/>
                    <span class="mr-4">@post.Date</span>
                    <IconFolder/>
                    <span class="mr-4">@post.Category.Name</span>
                    @if (post.TagIds!.Count > 0)
                    {
                        <span>Taggar:</span>
                        foreach (WpApiTag tag in post.Tags)
                        {
                            @tag.Name
                        }
                    }
                </p>
            </div>
        </article>
    }
}


@code {
    //private ICollection<WpApiCategory>? categories;
    private ICollection<WpApiPost>? posts;

    //TODO: move all to media util
    protected override async Task OnInitializedAsync()
    {
        HttpClient client = ClientFactory.CreateClient();
        ICollection<WpApiCategory> categories = await GetCategories(client);
        this.posts = await GetPosts(client);
        ModelUtil.MapCategoriesToPosts(categories!, posts!);

        //Medias and tags
        ISet<int> mediaIds = new HashSet<int>();
        ISet<int> tagIds = new HashSet<int>();
        foreach (WpApiPost post in posts)
        {
            if (post.FeaturedMediaId != 0)
            {
                mediaIds.Add(post.FeaturedMediaId);
            }

            foreach (int tagId in post.TagIds!)
            {
                tagIds.Add(tagId);
            }
        }
        
        //TODO: use shared method
        string mediaIdsString = string.Join(",", mediaIds);
        JsonElement mediasJson = await ApiUtil.FetchWp($"media?include={mediaIdsString}", client);
        ICollection<WpApiMedia> medias = JsonUtil.ParseList<WpApiMedia>(mediasJson);
        string tagIdsString = string.Join(",", tagIds);
        JsonElement tagsJson = await ApiUtil.FetchWp($"tags?include={tagIdsString}", client);
        ICollection<WpApiTag> tags = JsonUtil.ParseList<WpApiTag>(tagsJson);
        
        foreach (var post in posts)
        {
            post.FindAndSetFeaturedMedia(medias);
            post.FindAndSetTags(tags);
        }
    }

    private async Task<ICollection<WpApiCategory>> GetCategories(HttpClient client)
    {
        JsonElement json = await ApiUtil.FetchWp("categories", client);
        return JsonUtil.ParseList<WpApiCategory>(json);
    }

    private async Task<List<WpApiPost>> GetPosts(HttpClient client)
    {
        JsonElement json = await ApiUtil.FetchWp("posts?per_page=2", client);
        return JsonUtil.ParseList<WpApiPost>(json);
    }

}