@page "/kategori/{Slug}"
@page "/kategori/{Slug}/{Page:int}"
@using MichaelKjellander.Models.Wordpress
@using MichaelKjellander.Services
@using MichaelKjellander.SharedUtils
@using MichaelKjellander.Components.Boxes
@using MichaelKjellander.Models
@using MichaelKjellander.SharedUtils.Api
@using MichaelKjellander.SharedUtils.Routes
@inject IHttpClientFactory ClientFactory
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject JsService JsService
@inject ILogger<Category> Logger
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>
    @(ComponentUtil.FormatPageTitle(_category?.Name, Page))
</PageTitle>

@if (IsFirstPage && _category != null)
{
    <TitleBox Title="@_category.Name" Description="@_category?.Description">
        @if (_category!.Type == CategoryType.GameReview)
        {
            <form method="post" @onsubmit="Submit" @formname="starship-plain-form">
                <span class="font-bold">Betyg</span>
                <div></div>
                @for (int rating = 1; rating <= 10; rating++)
                {
                    
                    int localRating = rating;
                    <input id="rating@(rating)" type="checkbox" @onchange="args=>ToggleRating(args,localRating)"/>
                    <label class="mr-3" for="rating@(rating)">@rating</label>
                    @*<InputCheckbox @onchange="args=>ToggleRating(args, i)"/>*@
                }
                <p></p>
                <button class="btn btn-dark">Filtrera</button>
            </form>
        }
    </TitleBox>
}

<PostBoxes Posts="_posts" PaddingForFirst="IsFirstPage"/>

<PaginationBox paginationData="@_pagination" UrlPrefix="@_prefix"/>

@code {
    [Parameter] public string? Slug { get; set; }
    [Parameter] public int? Page { get; set; }
    private IList<WpPost>? _posts;
    private WpCategory? _category;
    private PaginationData? _pagination;
    private string? _prefix;
    [SupplyParameterFromForm]
    public GameReviewFilter? Filter { get; set; }

    private bool IsFirstPage => Page is null or 1;

    protected override async Task OnInitializedAsync()
    {
        if (Slug == null)
        {
            return;
        }
        InternalApiService service = new InternalApiService(ClientFactory.CreateClient(), Options);
        ApiResponse<WpPost> postsData = await service.FetchPosts(pageNumber: Page ?? 1, categorySlug: Slug);
        Filter ??= new();
        _posts = postsData.Items;
        _category = _posts?.FirstOrDefault()?.Category;
        _prefix = PageRoutes.Category(Slug);
        _pagination = postsData.PaginationData;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JsService.ScrollToTop();
    }

    private void Submit()
    {
        string newUrl = new HttpQueryBuilder(QueryArrayMode.Multiple)
            .Add("betyg", Filter!.Ratings)
            .Build("/kategori/tv-spelrecensioner"); //TODO: hardcoded
        Navigation.NavigateTo(newUrl);
    }
    
    private void ToggleRating(ChangeEventArgs args, int rating)
    {
        bool isSelected = (bool)args.Value!;
        if (isSelected)
        {
            Filter!.Ratings.Add(rating);
        }
        else
        {
            Filter!.Ratings.Remove(rating);
        }
    }

    public class GameReviewFilter
    {
        public readonly HashSet<int> Ratings = new();
    }
    
}