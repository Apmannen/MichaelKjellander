@using MichaelKjellander.SharedUtils.Api
@inject NavigationManager Navigation
@rendermode InteractiveServer

@if (PaginationData != null && @PaginationData.NumPages > 1)
{
    <div>TESTi:@_testi</div>
    <div class="bg-white mt-16 py-4 text-center">
        @foreach (PageData pageData in _visiblePages)
        {
            if (pageData.page == null)
            {
                <span>...</span>
            }
            else
            {
                <button class="px-4 text-xl sg-font-sans @(pageData.isCurrent ? "font-bold" : "")" @onclick="(() => DoNavigate(pageData))">
                    @pageData.page
                </button>
            }
        }
    </div>
}

@code {
    [Parameter] public PaginationData? PaginationData { get; set; }
    private int _testi = 0;

    private List<PageData> _visiblePages = [];

    private void DoNavigate(PageData pageData)
    {
        _testi++;
        Console.WriteLine("**** DONAV!!!");
        Navigation.NavigateTo(pageData.Link);
    }

    private class PageData
    {
        public int? page;
        public bool isCurrent;

        public string Link
        {
            get
            {
                if (page == 1)
                {
                    return "/";
                }

                return $"/sida/{page}";
            }
        }
    }

    protected override void OnParametersSet()
    {
        if (PaginationData == null)
        {
            return;
        }

        int currentPage = PaginationData.CurrentPage;
        int lastPage = PaginationData.NumPages;
        int prevPage = currentPage - 1;
        int nextPage = currentPage + 1;

        ISet<int> visiblePagesSet = new HashSet<int>();

        //I changed my mind, I want ALL pages.
        // visiblePagesSet.Add(1);
        // visiblePagesSet.Add(prevPage);
        // visiblePagesSet.Add(currentPage);
        // visiblePagesSet.Add(nextPage);
        // visiblePagesSet.Add(lastPage);
        // visiblePagesSet.Remove(0);
        for (int pageNumber = 1; pageNumber <= lastPage; pageNumber++)
        {
            visiblePagesSet.Add(pageNumber);
        }

        List<int> tmpList = new List<int>(visiblePagesSet);
        tmpList.Sort();

        for (int i = 0; i < tmpList.Count; i++)
        {
            int current = tmpList[i];
            int? prev = i > 0 ? tmpList[i - 1] : null;
            if (prev != null)
            {
                int diff = current - (int)prev;
                if (diff > 1)
                {
                    _visiblePages.Insert(i, new PageData() { page = null});
                }
            }

            _visiblePages.Add(new PageData()
            {
                page = current, 
                isCurrent = current == PaginationData.CurrentPage,
            });
        }
    }
}