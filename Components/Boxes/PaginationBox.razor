@using System.ComponentModel.DataAnnotations
@using MichaelKjellander.SharedUtils.Api
@inject NavigationManager NavigationManager;

@if (PaginationData != null && @PaginationData.NumPages > 1)
{
    <div class="bg-white mt-16 py-4 text-center">
        @foreach (PageData pageData in _visiblePages)
        {
            if (pageData.Page == null)
            {
                <span>...</span>
            }
            else
            {
                <a class="px-4 text-xl sg-font-sans @(pageData.IsCurrent ? "font-bold" : "")" href="@(GetLink(pageData.Page ?? 1))">
                    @pageData.Page
                </a>
            }
        }
    </div>
}

@code {
    [Parameter][Required] public PaginationData? PaginationData { get; set; }
    [Parameter][Required] public string? UrlPrefix { get; set; }
    [Parameter] public string? FirstUrlPrefix { get; set; }

    private List<PageData> _visiblePages = [];

    private class PageData
    {
        public int? Page;
        public bool IsCurrent;

        // public string Link
        // {
        //     get
        //     {
        //         if (Page == 1)
        //         {
        //             return "/";
        //         }
        //
        //         return $"/senaste/{Page}";
        //     }
        // }
    }


    private string GetLink(int page)
    {
        if (page == 1)
        {
            return FirstUrlPrefix!;
        }

        return UrlPrefix + "/" + page;
    }

    protected override void OnParametersSet()
    {
        if (PaginationData == null)
        {
            return;
        }
        
        _visiblePages.Clear();
        int lastPage = PaginationData.NumPages;
        int currentPage = PaginationData.CurrentPage;
        
        //Yes, I want all pages
        for (int pageNumber = 1; pageNumber <= lastPage; pageNumber++)
        {
            _visiblePages.Add(new PageData()
            {
                Page = pageNumber,
                IsCurrent = pageNumber == currentPage,
            });
        }

        FirstUrlPrefix ??= UrlPrefix;
    }

}