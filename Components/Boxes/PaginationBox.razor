@using System.ComponentModel.DataAnnotations
@using MichaelKjellander.Models
@using MichaelKjellander.Models.UtilModels
@inject NavigationManager Navigation;
@rendermode InteractiveServer

COUNTER: @Counter
@if (PaginationData != null && @PaginationData.NumPages > 1 && _visiblePages != null)
{
    <div class="bg-white mt-16 py-4 text-center">
        @foreach (int pageNumber in _visiblePages)
        {
            string linkCopy = GetLink(pageNumber);
            <a class="px-4 text-xl sg-font-sans @(IsCurrent(pageNumber) ? "font-bold" : "")" href="@linkCopy">
                @pageNumber
            </a>
        }
    </div>
}

@code {
    [Parameter][Required] public PaginationData? PaginationData { get; set; }
    [Parameter][Required] public string? UrlPrefix { get; set; }
    [Parameter] public string? FirstUrlPrefix { get; set; }
    [Parameter] public int Counter { get; set; }
    [Parameter] public string Query { get; set; }

    private List<int>? _visiblePages = null;

    private class PageData
    {
        public int Page;
        public bool IsCurrent;
        public string Link = "";
    }

    private bool IsCurrent(int pageNumber)
    {
        int currentPage = PaginationData!.CurrentPage;
        return pageNumber == currentPage;
    }
    private string GetLink(int pageNumber)
    {
        FirstUrlPrefix ??= UrlPrefix;
        string queryString = Query ?? "";//new Url(Navigation.Uri).GetQueryString();
        if (pageNumber == 1)
        {
            return FirstUrlPrefix! + queryString;
        }
        return UrlPrefix + "/" + pageNumber + queryString;
    }

    protected override void OnParametersSet()
    {
        if (PaginationData == null)
        {
            return;
        }

        _visiblePages = [];
        
        
        //Yes, I want all pages
        for (int pageNumber = 1; pageNumber <= PaginationData.NumPages; pageNumber++)
        {
            _visiblePages.Add(pageNumber);
        }
    }

}