@using System.Text.RegularExpressions
@using MichaelKjellander.Components.Pages
@using MichaelKjellander.Config
@using MichaelKjellander.Models
@using MichaelKjellander.Models.Wordpress
@using MichaelKjellander.Services
@using MichaelKjellander.SharedUtils
@using MichaelKjellander.SharedUtils.Routes
@inject NavigationManager NavigationManager
@inject Microsoft.Extensions.Options.IOptions<AppConfig> Options
@inject IHttpClientFactory ClientFactory

<div class="top-row navbar navbar-dark">
    <div class="container-fluid">
        <a class="sg-navbar-brand font-bold text-3xl" href="/">Michael Kjellander</a>
    </div>
</div>

<input type="checkbox" title="Navigation menu" class="navbar-toggler"/>
<div class="lg:h-20"></div>

<div class="nav-scrollable">
    <nav class="flex-column">
        @foreach (var link in _links)
        {
            <div class="nav-item border-gray-200">
                <a class="nav-link py-2 text-base @(IsCurrent(link) ? "active" : "")" href="@link.Url">
                    @link.Text
                </a>
            </div>
        }
    </nav>
</div>


@code {
    private NavLink[] _links = [];
    
    protected override async Task OnInitializedAsync()
    {
        InternalApiService service = new InternalApiService(ClientFactory.CreateClient(), Options);
        IList<WpCategory> categories = await service.FetchCategories();
        
        _links = [
            new NavLink("Senaste inläggen", PageRoutes.Home, "(/|/senaste/[0-9]+)"),
            CreateCategoryNavLink(categories, CategoryType.Game),
            CreateCategoryNavLink(categories, CategoryType.GameReview),
            CreateCategoryNavLink(categories, CategoryType.Other),
            new NavLink("Kontakt", PageRoutes.Page("kontakt"), "/sida/kontakt")
        ];
    }

    

    private static NavLink CreateCategoryNavLink(IList<WpCategory> categories, CategoryType type)
    {
        WpCategory category = categories.First(category => category.Type == type);
        return new NavLink(category.Name!, PageRoutes.Category(type), PageRoutes.CategoryPattern(type));
    }

    private record struct NavLink(string Text, string Url, string Pattern);

    private bool IsCurrent(NavLink navLink)
    {
        string currentUrl = NavigationManager.Uri;

        string fullPattern = $"^{Options.Value.SiteUrl}{navLink.Pattern}$";
        Regex regex = new Regex(fullPattern);
        bool isMatch = regex.IsMatch(currentUrl);

        Console.WriteLine($"cu={currentUrl}, fp={fullPattern}, m={isMatch}");

        return isMatch;
    }

}